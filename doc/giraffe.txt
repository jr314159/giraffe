giraffe.txt 02-05-04

"The Giraffe Project"
Joel Rosen
Winter Term 2003-4


This was my first programming project in C, which I did as a Winter
Term project.  I wanted to learn how real programs worked, since the
most complex projects I had ever done were non-compiled server-side
web-scripts, like XMLBoard.  I also wanted to learn how platform games
like Mario worked, since I had never written a game where things moved
in a continuous space.  There is still a lot of work to be done and a
lot of features I have in mind, but Winter Term is over now and for
the sake of my sanity I'm going to try and put this project away where
it won't haunt my every waking hour.

Oh yes, I called it "The Giraffe Project" because I had no idea what I
wanted to make a game about, and my friend Jenny suggested I make a
game about giraffes.

The Giraffe Project was developed on Debian Linux on a 850Mhz
machine.  I used the GNU Autotools (Autoconf, Automake) to manage and
build the project.  I used the following libraries:
SDL (www.libsdl.org) for graphics and input
SDL_image (www.libsdl.org/projects/SDL_image/) for image file loading
SDL_mixer (www.libsdl.org/projects/SDL_mixer/) for music and sound
SDL_gfx (www.ferzkopp.net/~aschiffler/Software/SDL_gfx-2.0/) for
	graphics primitives, but so far this is only used for a
	debugging feature.
I also used the GNU C standard libraries.  I don't know if any of the
functions I used are incompatible with standard ANSI C.

Anyway, as follows is a technical explanation of how the game works:

To start, let me list some of the terminology I used in this game:

Level:
	This is pretty standard, like your average Mario level.  It is
	organized and divided into "areas."

Area:	
	An area has a tileset, music, a map, and objects.

Map:
	A map has a bunch of layers, which are arrays of tiles.

Tile:
	A tile is the building block of the game world.  There can be
	many types of tiles, some which do things, some which do
	nothing but sit there and be solid (like the ground), and some
	which are just there to look at.  One thing that tiles all
	have are names of animations.  These names are resolved into
	actual animations and graphics by the tileset.  Tiles cannot
	move, and they are all the same size.  (Probably 32x32 or 16x16).

	A note here -- why did I choose to limit the game to a
	grid-like world full of tiles?  At first, when I was
	considering how to describe my game world, I was turned off to
	the idea of a tile-based game.  I didn't understand why
	everybody made sidescrollers that way.  But as I gave it more
	thought I came to two conclusions:  1)  There is a lot of data
	in the world and it's just simpler to keep it organized in a
	grid.  2)  Collision detection is much easier to do
	efficiently when potential colliders are limited this way.  If
	you're moving your guy around, how do you know when he's run
	into something?  Where do you even begin to start looking?  By
	stuffing the world into tiles, the searching process is
	greatly simplified.

Object:
	Objects are the things in our world which are not tiles.  They
	can be any size (limitied by the size of sectors, which I will
	get to), and they can move around in a continuous space,
	unlike tiles, which are constricted to cells in an array.  The
	player is an object, monsters are objects, but things like
	bullets are objects too.  Objects have position and velocity.
	They have "sprites," to describe what they look like.

Sprite:
	I think I misused this term; most people would say that what
	I'm calling "objects" are really "sprites."  But anyway, in my
	little world with happy little trees, sprites are just named
	collections of animations.  Generally, an object will have one
	sprite, such as "player", and it will go through a number of
	animations within that sprite, such as "walk_left" or
	"jump_right."

Bounds:
	The geometrical shapes of tiles and objects are both described
	by "bounds."  They can have any number of bounds.  So far,
	bounds can either be lines, rectangles, or circles (although I
	haven't written collision detection code for circles yet, so
	they can't be used.)

Coordinates:
	There are two kinds of coordinates in the game: "map" and
	"real."  They are both x,y coordinates.  The positions of
	tiles in a layer are described by map coordinates, and the
	positions of objects in the world and the positions of
	boundaries in objects and tiles are described by real
	coordinates.  Both tile and real coordinates are 0,0 in the
	top left corner of a layer.  The coordinates of bounds or
	image offsets also originate from the top left corner of an
	object or tile.  Conversion between the two types of
	coordinates is done by dividing or multiplying by the
	dimensions of tiles.  Currently, real coordinates also
	coincide with pixel coordinates, but theoretically that could
	be changed without any modification to the game code.

Sectors:
	Objects are kept organized in sectors, but sectors are not
	actually a physical concept in our game world.  Sectors allow
	the game processing code to limit itself to a smaller section
	of the world at one time, so that things can happen onscreen
	and slightly offscreen, but not to the entire game world in
	places far from where the action is.  The size of sectors and
	the range of sectors which the game code will scan through
	presents limits to the size of objects.  For example, if an
	object is in a nearby sector which is out of range of the game
	processing, but the object is significantly bigger than the
	size of a sector or two, so big that it is actually extending
	into the screen's field of view, it still won't be displayed
	on screen and things won't collide with it until the sector
	which that object is in finally scrolls into range, and the
	object will suddenly pop up on screen with unpredictable
	results.  I still don't know what the optimal size for a
	sector is.  They can be as big as the screen, or as small as a
	tile.  I think that it might be more computationally costly to
	have small sectors and scan through a big range of sectors,
	but that there wouldn't be as much of a limitation on object
	sizes, or risk that objects would pop into view.  I'm not
	sure.

Time:
	Movement and actions happen based on the amount of time
	passed.  Time can be any unit, as small as milliseconds.  To
	make it easier to conceptualize, I chose to use seconds.

Alright, now that I've got the terminology out of the way, here is a
basic description of the flow of the game code.  I'd make a diagram,
but I couldn't figure out why a diagram would be more helpful than
just writing it out:

I.  Initialization and Loading:
    1)	SDL is initialized for graphics and audio.
	The graphics is set to a given resolution (current default is
	640x480). Initializing graphics also starts up SDL's threaded
	event system.
    2)  The first area in the first level is found and
    3)  Music and sound effects are loaded,
    4)  The tileset is loaded,
    5)  The map is loaded,
    6)  Sprites are loaded,
    7)  Objects are loaded,
    6)  The camera size is set and it is focused on the player's position,
    8)  The main game timer is initialized and started.

II. The game loop.  This is where everything happens during play.
    Things that are done in the game loop are generally done only in
    the parts of the world that are near the player, and are based on
    the amount of time that has passed since the last cycle through
    the game loop.
    1)  The world is "run."  This means:
      a)  All objects within the field of play are moved, based on
          their current velocities.
      b)  Collisions are detected between objects and tiles and
          objects and objects.  For those objects which are solid,
	  collision responses are done -- that is, the objects are
	  moved out of collision and they are given new velocities.
      c)  Tiles animate, and do whatever it is they do based on what
	  happened so far in the game cycle.
      d)  Objects do whatever it is they do based on what has
	  happened, and animate.
      e)  Any signals which objects may have sent to the object module
          are handled.  (So far, this means spawning new objects or
          freeing dead ones.)
    2)  The game timer is updated based on the amount of time it took
        to get through the game cycle.
    3)  The camera is moved to focus on the played, and it renders
	whatever it sees to the screen.
    4)  SDL Events which have accumulated, such as keypresses, are
    handled.

Now here's the breakdown of what each module does and how they work:

main.c
	main.c manages the flow of execution as I described above.  It
	makes all of the calls to the other modules to see that
	everything gets done in the right order.  It actually contains
	more game-engine-specific code than I would like, and I
	imagine that if I ever get around to making a game-state
	module, much of the code in main.c would be moved in there.

dynarray.c
	dynarray.c contains some useful functions for dynamically
	allocating and freeing 1 and 2 dimensional arrays.

animation.c
	animation.c provides data types for animations and functions
	for animating and freeing them.  Actually there are two key
	data types: AnimData and Animation.  AnimData is a structure
	which actually contains the animation itself -- it contains
	the array of frames and information about the default play
	speed, play mode, etc.  AnimData is usually loaded into an
	array.  Then things such as objects or tiles which display
	animations have the Animation data type.  An Animation
	contains an id which corresponds to the location in the array
	to which the AnimData was loaded, and it also contains
	information about the playback state, such as the current
	frame number or the time since the last frame was displayed.
	The code for loading animations can be found in file.c, though
	it seems to me that this wasn't the most logical design
	choice.

file.c
	This is the bit of code of which I am least proud.  I wanted
	to create a layer of abstraction between the modules and the
	filesystem and the directory structure of the game data, so
	when any modules load anything from disk, they go through
	functions in file.c  It's messy code, and it doesn't even
	manage simple things like relative paths to files.  I think I
	would have been better off storing everything in XML and using
	an XML parser to get at it.

defs.h
	This contains type definitions and enumerations which most all
	modules use.  (Actually I plan to move a lot of the general
	geometric functions from collision.c into geometry.c, and many
	of the definitions in defs.h will move there.)

audio.c
	audio.c is basically an interface to SDL_mixer.  It contains
	functions for playing sounds and music.  Nothing fancy.

graphics.c
	graphics.c is basically an interface to SDL's graphics
	functions and functions in SDL_image.  One thing it does is
	maintain a pointer to the SDL_Surface for the screen.  One
	thing I ought to do is provide a wrapper typedef for
	SDL_Surface, so that other modules don't need to know they're
	using SDL.

input.c
	input.c does nothing more than maintain a collection of states
	for game keys, so that any module can quickly determine
	whether a key is down or not.  In the future, I should move
	the SDL_Event polling code into input.c, so that it can be
	responsible for interpreting SDL keyboard events.

signal.c
	signal.c provides definitions for signals and functions for
	dealing with signal queues.  Signals are a method for various
	parts of the game to know what has happened.  For example, if
	an object hits something else, it receives a "hit" signal.

timer.c
	timer.c provides a Timer type.  Many things can have timers.
	The main game loop has its own timer so that it can tell
	things how much time has gone by, and Animations have timers
	too, to tell if it's time to switch frames.  There are two
	main different types of uses for a timer.  One is to call
	time_dt() on the timer to find the elapsed time since the
	timer was last updated, and one is to call time_expired() to
	see if the timer has "gone off."  Both of these functions rely
	on the "max_elapsed" value.  For time_dt(), if the elapsed
	time exceeds max_elapsed, it will not return a length of time
	greater than max_elapsed.  The purpose of this is that game
	movement is done by the amount of time that has passed in a
	game cycle, but on very slow computers, the amount of time
	elapsed will go too high and objects will move in big jumps on
	the screen, and collisions may not work right.  So, by setting
	a max_elapsed of .05 seconds, for any computer that is so slow
	that it can't get through a cycle in that amount of time, the
	game will just run slowly.  But for very fast computers, the
	game will run at a constant speed with very smooth motion.
	
	The second use, time_expired(), just returns true if the time
	passed is greater than or equal to max_elapsed.  This allows
	for things to happen after a certain amount of time has gone by.


Here's the meat of the game:

map.c
	map.c loads tilesets (lists of animations) and maps.  It
	provides the Tile datatype. There are a few attributes which
	are common to all tiles, and then there are attributes and
	functions which are specific to different types of tiles.
	(I'll explain object and tile types in a bit.) map.c  provides
	several accessor functions for tiles, which are always
	specified by layer #, x, y, where x and y are in map
	coordinates.

object.c
	object.c loads sprite sets and objects.  It provides the
	Object datatype (which is the equivalent of a Tile, except it
	can move).  Objects for an area are maintained in an
	"ObjContainer" which is equivalent to the "Map" structure, and
	it keeps objects grouped by layer (1 layer for each layer in
	the map) and by sector.  Within a sector, objects are stored
	in linked lists. object.c provides many accessor functions for
	objects. 

How Object and Tile types work:
    When an object is loaded, it has a type number.  This refers to an
    object type in the enumerated list in types/objtypes.h.
    objtypes.c contains an array of pointers to "object definition
    structures", and this array is organized according to the object
    types enumerated list.  Then, each type of object is defined in a
    .c file in the types/objects directory.  This .c file contains
    functions for the behavior of an object, and each one of these
    files must end with an object definition structure.  This object
    definition structure contains various values for the type of
    object, such as size, mass, sprite name, and it also has pointers
    to functions within the file.  For example, "bounds" is a pointer
    to a function which allocates the bounds for the object, and "go"
    is a pointer to the function which the object executes once every
    game cycle.

    Type-specific attributes:
    Tiles and objects also have attributes which are specific to their
    type. For example, the player has hitpoints, and "jump power",
    etc, where a bullet does not.  To deal with this problem, objects
    and tiles have a void pointer called "atts."  When an object wants
    to access its own type-specific attributes, it must cast this void
    pointer to a pointer to a type of structure which contains all of
    the attributes the object type needs.  The "init_atts" and
    "free_atts" function pointers are for allocating and freeing these
    structures.

    The system is basically the same for tiles and objects.

collision.c
	collision.c provides functions for determining when an object
	has collided with another object or a tile, and responding
	appropriately.  It sends signals to objects and tiles when
	collisions occur, and if both things that have collided are
	"solid," it makes sure that they are moved out of collision,
	and objects velocities are changed according to collision
	physics.  Generally speaking, collisions are detected by
	finding whether the bounds of two objects or an object and a
	tile have run into each other, given the objects' velocities
	and the amount of time that has passed during the game cycle.
	There is a lot of tedious geometry and kinematics for each
	type of bound, and I haven't even gotten to circles yet.
	collision.c still has problems, and collisions are not always
	handled properly, especially for inelastic collisions.  For
	elastic collisions, it's pretty damn good.

camera.c
	The camera has a position in the world in real coordinates,
	and a layer on which it is focusing.  The position refers to
	the center of what the camera is looking at.  When cam_render() is
	called, the camera looks at the map and objects to determine
	what it can see, and makes calls to graphics.c to render
	everything to the screen.  To have the view scroll as the
	player moves around, you just need to set the camera position
	to the same position as the player every game cycle.  As there
	are several layers in an area, the camera also does parallax
	scrolling.  Given the position on the layer on which the
	camera is focusing, it finds the position on other layers
	which it can see by multiplying by a ratio of the sizes of
	different layers. So, a layer with very large dimensions will
	scroll by faster than a layer with small dimensions.  To get a
	cool 3d effect, make the background layers smaller and the
	foreground layers larger.  Of course, two layers with the same
	dimensions will scroll by at the same rate.


That's that.

Also, I keep the game data stored in a directory tree as follows:

root_data_directory/
+--levels/
| +--levels.dat
| +--level1/
| | +--areas.dat
| | +--areas/
| |   +--area1.area
| |   +--area_n.area
| +--level_n/
+--music/
| +--music.dat
| +--track1.xm
| +--track_n.xm
+--sounds/
| +--sounds.dat
| +--boing.wav
| +--thock.wav
| +--boom.wav
+--sprites/
| +--sprites.dat
| +--player/
|   +--sprite
|   +--walk_left/
|   | +--anim
|   | +--0.png
|   | +--1.png
|   | +--2.png
|   +--walk_right/
+--tilesets/
  +--tilesets.dat
  +--grass/
  | +--tiles.dat
  | +--tile_01/
  | | +--anim
  | | +--0.png
  | +--tile_n/
  +--desert/

That's all.  If anything is unclear or I haven't included anything,
the source is well-commented and I think it should be easy enough to
figure out.